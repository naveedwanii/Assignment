{"version":3,"sources":["00-config/_font-faces.scss","molecules/card-headings.css","molecules/card-headings.scss","00-config/_fonts.scss","00-config/_colors.scss","../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss"],"names":[],"mappings":"AASA;EACE,yCAAA;;EACA,kBAAA;;EACA,gBAAA;;EACA,mDAAA;ACRF;;ACJA;EACE,mBAAA;ADMF;;ACLE;EACE,kBAAA;EACA,yCCHW;EDIX,eAAA;EACA,gBAAA;EACA,cEFU;AHSd;;ACLE;EACE,kBAAA;EACA,cELS;EFMT,yCCXW;EDYX,eAAA;ADOJ;;ACNI;EACE,eAAA;ADQN;;AIwCI;EH/DJ;IAmBI,mBAAA;EDQF;AACF","file":"../../components/molecules/card-headings.css","sourcesContent":["$font-path: '/themes/myproject/fonts';\n\n// @font-face {\n//   font-family: 'averto';\n//   font-style: normal;\n//   font-weight: 400;\n//   src: url(#{$font-path}/averto/Averto.ttf);\n// }\n\n@font-face {\n  font-family: 'Averta Demo PE Cutted Demo';\n  font-style: normal;\n  font-weight: 400;\n  src: url(#{$font-path}/averto/Averto.ttf);\n}\n","@font-face {\n  font-family: \"Averta Demo PE Cutted Demo\";\n  font-style: normal;\n  font-weight: 400;\n  src: url(/themes/myproject/fonts/averto/Averto.ttf);\n}\n.card-heading {\n  margin-bottom: 30px;\n}\n.card-heading--heading {\n  text-align: center;\n  font-family: \"Averta Demo PE Cutted Demo\";\n  font-size: 36px;\n  font-weight: 400;\n  color: #495057;\n}\n.card-heading--subheading {\n  text-align: center;\n  color: #7c8993;\n  font-family: \"Averta Demo PE Cutted Demo\";\n  font-size: 18px;\n}\n.card-heading--subheading p {\n  margin-top: 5px;\n}\n@media (min-width: 1025px) {\n  .card-heading {\n    margin-bottom: 75px;\n  }\n}","@import '../config.all';\n.card-heading {\n  margin-bottom: 30px;\n  &--heading {\n    text-align: center;\n    font-family: $font-primary;\n    font-size: 36px;\n    font-weight: 400;\n    color: $black-color;\n  }\n  &--subheading {\n    text-align: center;\n    color: $light-grey;\n    font-family: $font-primary;\n    font-size: 18px;\n    p {\n      margin-top: 5px;\n    }\n  }\n  @include breakpoint($desktop) {\n    margin-bottom: 75px;\n  }\n}\n","// Define fonts scss variables here\n// $font-primary: 'averto', sans-serif;\n$font-primary: 'Averta Demo PE Cutted Demo';\n\n// @import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap\"');\n","// Define colors scss variables here.\n$color-white: #ffffff;\n$color-black: #000000;\n$grey: #ccc;\n$blue-heading: #017fd5;\n$blue-arrow: #0b80ce;\n$black-color: #495057;\n$light-grey: #7c8993;\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n"]}