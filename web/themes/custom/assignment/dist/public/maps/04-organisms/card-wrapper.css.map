{"version":3,"sources":["00-config/_font-faces.scss","04-organisms/card-wrapper.css","../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","04-organisms/card-wrapper.scss","00-config/_mixins.scss","00-config/_colors.scss"],"names":[],"mappings":"AASA;EACE,yCAAA;;EACA,kBAAA;;EACA,gBAAA;;EACA,mDAAA;ACRF;;AC2DI;EC9DF;ICOA,0EAAA;IAEA,WAAA;IACA,YAAA;IACA,YAAA;IACA,oBAAA;IDTI,kBAAA;IACA,UAAA;IACA,WAAA;EFSJ;AACF;;AEPE;EACE,8DAAA;AFSJ;;AC4CI;ECnDF;ICKA,2EAAA;IAEA,WAAA;IACA,YAAA;IACA,YAAA;IACA,oBAAA;IDPI,kBAAA;IACA,UAAA;IACA,UAAA;EFaJ;AACF;;AEXE;EACE,+DAAA;AFaJ;;AEXE;EACE,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,wBAAA;MAAA,qBAAA;UAAA,uBAAA;AFaJ;;AEZI;EACE,eAAA;EACA,WAAA;EACA,cEzBO;AJuCb;;AEZM;EACE,aAAA;AFcR;;ACiBI;EC/DJ;IAqCI,iBAAA;EFaF;AACF;;ACYI;EC/DJ;IAwCI,kBAAA;IACA,UAAA;IACA,oBAAA;IAAA,oBAAA;IAAA,aAAA;IACA,qBAAA;EFeF;AACF","file":"../../components/04-organisms/card-wrapper.css","sourcesContent":["$font-path: '/themes/myproject/fonts';\n\n// @font-face {\n//   font-family: 'averto';\n//   font-style: normal;\n//   font-weight: 400;\n//   src: url(#{$font-path}/averto/Averto.ttf);\n// }\n\n@font-face {\n  font-family: 'Averta Demo PE Cutted Demo';\n  font-style: normal;\n  font-weight: 400;\n  src: url(#{$font-path}/averto/Averto.ttf);\n}\n","@font-face {\n  font-family: \"Averta Demo PE Cutted Demo\";\n  font-style: normal;\n  font-weight: 400;\n  src: url(/themes/myproject/fonts/averto/Averto.ttf);\n}\n@media (min-width: 1025px) {\n  .cards-view-container .slick-prev {\n    background: #ffffff url(\".../../../../../images/left-arrow.svg\") no-repeat;\n    width: 30px;\n    height: 30px;\n    border: none;\n    text-indent: -9999px;\n    position: relative;\n    top: 10rem;\n    left: -53px;\n  }\n}\n.cards-view-container .slick-prev:hover {\n  background: url(\".../../../../../images/left-arrow-hover.svg\");\n}\n@media (min-width: 1025px) {\n  .cards-view-container .slick-next {\n    background: #ffffff url(\".../../../../../images/right-arrow.svg\") no-repeat;\n    width: 30px;\n    height: 30px;\n    border: none;\n    text-indent: -9999px;\n    position: relative;\n    top: 10rem;\n    left: 12px;\n  }\n}\n.cards-view-container .slick-next:hover {\n  background: url(\".../../../../../images/right-arrow-hover.svg\");\n}\n.cards-view-container .slick-dots {\n  display: flex;\n  justify-content: center;\n}\n.cards-view-container .slick-dots li {\n  font-size: 42px;\n  width: 16px;\n  color: #0b80ce;\n}\n.cards-view-container .slick-dots li button {\n  display: none;\n}\n@media (min-width: 768px) and (max-width: 1024px) {\n  .cards-view-container {\n    margin-left: 12px;\n  }\n}\n@media (min-width: 1025px) {\n  .cards-view-container {\n    position: relative;\n    left: 23px;\n    display: flex;\n    margin: 0 80px 0 80px;\n  }\n}","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","@import '../config.all';\n.cards-view-container {\n  .slick-prev {\n    @include breakpoint($desktop) {\n      @include slick-left-arrow();\n      position: relative;\n      top: 10rem;\n      left: -53px;\n    }\n  }\n  .slick-prev:hover {\n    background: url('.../../../../../images/left-arrow-hover.svg');\n  }\n  .slick-next {\n    @include breakpoint($desktop) {\n      @include slick-right-arrow();\n      position: relative;\n      top: 10rem;\n      left: 12px;\n    }\n  }\n  .slick-next:hover {\n    background: url('.../../../../../images/right-arrow-hover.svg');\n  }\n  .slick-dots {\n    display: flex;\n    justify-content: center;\n    li {\n      font-size: 42px;\n      width: 16px;\n      color: $blue-arrow;\n\n      button {\n        display: none;\n      }\n    }\n  }\n  @include breakpoint($tablet) {\n    margin-left: 12px;\n  }\n  @include breakpoint($desktop) {\n    position: relative;\n    left: 23px;\n    display: flex;\n    margin: 0 80px 0 80px;\n  }\n}\n","@mixin line-clamp($linesToClamp: 2) {\n  display: -webkit-box;\n  -webkit-line-clamp: $linesToClamp;\n  -webkit-box-orient: vertical;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n@mixin slick-left-arrow() {\n  background: $color-white url('.../../../../../images/left-arrow.svg')\n    no-repeat;\n  width: 30px;\n  height: 30px;\n  border: none;\n  text-indent: -9999px;\n}\n\n@mixin slick-right-arrow() {\n  background: $color-white url('.../../../../../images/right-arrow.svg')\n    no-repeat;\n  width: 30px;\n  height: 30px;\n  border: none;\n  text-indent: -9999px;\n}\n","// Define colors scss variables here.\n$color-white: #ffffff;\n$color-black: #000000;\n$grey: #ccc;\n$blue-heading: #017fd5;\n$blue-arrow: #0b80ce;\n$black-color: #495057;\n$light-grey: #7c8993;\n"]}